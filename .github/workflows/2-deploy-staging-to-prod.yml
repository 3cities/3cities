name: 2 | Deploy staging to prod
on:
   workflow_dispatch:
jobs:
  verified-commit:
    name: Verify commit from main
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.hash }}
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: releases/staging
          fetch-depth: 0 # fetch all tags/history, required to compare against origin/main
      - id: get_commit
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Verify main branch is ahead or equal # fail the build unless the verified build commit is part of origin/main history. This prevents commits outside of main from being deployed to prod. We use this solution because github doesn't support branch protection rules to enforce that pushes to a given branch must come from origin/main. So technically, any commits could be pushed to releases/staging by anybody with push access, but then the auto deployment to prod will fail here when it detects these commits aren't in main history.
        run: |
          git fetch origin main
          if git merge-base --is-ancestor HEAD origin/main; then
            echo "origin/main branch is ahead or equal to commit being deployed ${{ steps.get_commit.outputs.hash }}"
          else
            echo "origin/main branch is behind commit being deployed ${{ steps.get_commit.outputs.hash }}. Failing build..."
            exit 1
          fi
  fetch-tag:
    needs: [verified-commit]
    if: ${{ needs.verified-commit.outputs.commit_hash != null }}
    name: Fetch GitHub tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
          fetch-depth: 0 # necessary to fetch all tags
      - name: Get tag
        id: get_tag
        run: |
          echo "found tag=$(git tag --contains)"
          echo "tag=$(git tag --contains)" >> $GITHUB_OUTPUT
  verify-build:
    needs: [verified-commit]
    if: ${{ needs.verified-commit.outputs.commit_hash != null }}
    name: Verify build
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
      - uses: ./.github/actions/verify-build
  push-to-releases-will-deploy-to-prod:
    needs: [verified-commit, fetch-tag, verify-build]
    if: ${{ needs.fetch-tag.outputs.tag != null }}
    name: 'Push to releases/will-deploy-to-prod'
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
          fetch-depth: 0 # fetch all tags/history, required for the push below to succeed as it must locally compare against releases/will-deploy-to-prod to execute the non-fast-forward push.
      - name: Git push
        # NB we use default of fast-forward only (no force push) because we want our CI/CD pipeline to have linear history for safety. This is also enforced in releases/will-deploy-to-prod protected branch settings.
        run: |
          git push origin ${{ needs.verified-commit.outputs.commit_hash }}:refs/heads/releases/will-deploy-to-prod
  deploy-prod:
    needs: [verified-commit, fetch-tag, push-to-releases-will-deploy-to-prod]
    if: ${{ needs.fetch-tag.outputs.tag != null }}
    name: Deploy prod
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/build-prod
        with:
          tag: ${{ needs.fetch-tag.outputs.tag }}
          alchemyApiKey: ${{ secrets.REACT_APP_ALCHEMY_API_KEY }}
          infuraApiKey: ${{ secrets.REACT_APP_INFURA_API_KEY }}
          web3authClientId: ${{ secrets.REACT_APP_WEB3AUTH_CLIENT_ID }}
          walletconnectProjectId: ${{ secrets.REACT_APP_WALLETCONNECT_PROJECT_ID }}
          isMainnet: true
      - uses: ./.github/actions/deploy-cloudflare-pages
        with:
          projectName: 3cities-prod
          apiToken: ${{ secrets.CLOUDFLARE_PAGES_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
  github-release:
    needs: [verified-commit, fetch-tag, deploy-prod]
    name: GitHub release
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
          fetch-depth: 0 # fetch all tags/history, required for release-action to find tag.
      - name: Create GitHub release
        uses: 3cities/release-action@eb05307dcee34deaad054e98128088a30d7980dc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.fetch-tag.outputs.tag }}
          allowUpdates: true # we're updating a previously-created pre-release to a release.
          omitNameDuringUpdate: true # preserve the pre-release name.
          omitBodyDuringUpdate: true # preserve the pre-release body.
          updateOnlyUnreleased: true # fail build if any pre-existing GitHub release for this tag is not a pre-release or draft. This is a sanity check to prevent two releases for the same tag.
  prod-deployment-successful: # no-op job to force a workflow-level "prod-deployment-successful" github status check to be published. Github automatically makes the result of each workflow job available as a status check.
    needs: [github-release]
    # NB here we omit 'name' so that the name of the status check in GitHub is the key prod-deployment-successful instead of the 'name'
    runs-on: ubuntu-latest
    steps:
      - run: exit 0 # no-op because a job definition requires something to do, but all we want this job to do is publish a workflow-level github status check.
  push-to-releases-prod:
    needs: [verified-commit, prod-deployment-successful]
    name: 'Push to releases/prod'
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: ${{ needs.verified-commit.outputs.commit_hash }}
          fetch-depth: 0 # fetch all tags/history, required for the push below to succeed as it must locally compare against releases/prod to execute the non-fast-forward push.
      - name: Git push
        # NB we use default of fast-forward only (no force push) because we want our CI/CD pipeline to have linear history for safety. This is also enforced in releases/prod protected branch settings.
        run: |
          git push origin ${{ needs.verified-commit.outputs.commit_hash }}:refs/heads/releases/prod
