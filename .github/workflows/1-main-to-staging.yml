name: 1 | Push main -> staging
on:
  push:
    branches:
      - main
jobs:
  # Here we don't first verify the build before pushing to staging. This is because although it would be technically safer and more correct to always verify the build before pushing to staging, the staging deployment workflow verifies the build and so in most cases we'd be redundantly verifying which increases the total amount of time for the build to reach production.
  # verify-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222  # checkout .github/actions/verify-build
  #       with:
  #         ref: main
  #     - uses: ./.github/actions/verify-build
  push-staging:
    # needs: [verify-build]
    name: 'Push to staging branch'
    runs-on: ubuntu-latest
    steps:
      - uses: 3cities/checkout@f095bcc56b7c2baf48f3ac70d6d6782f4f553222
        with:
          ref: main
          fetch-depth: 0 # fetch all tags/history, required for the push below to succeed as it must locally compare against releases/staging to execute the non-fast-forward push.
      - name: Git push
        # NB we use default of fast-forward only (no force push) because we want our CI/CD pipeline to have linear history for safety. This is also enforced in releases/staging protected branch settings.
        run: |
          git push origin main:releases/staging
