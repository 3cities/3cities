syntax = "proto3";
package threecities.v1; // we follow a major versioning scheme for our proto files. All files in the threecities.v1 package are compatible with the first major version. In the future, new major versions like threecities.v2 will be introduced. At that point, threecities.v1 types will be deprecated. The v2 app layer will attempt v2 deserialization first, falling back to v1 only if the former fails.

// LogicalAssetTicker is the set of all logical asset tickers we
// support. Our app-layer LogicalAssetTicker types are automatically
// derived from this single authoritative definition in a typesafe
// manner.
enum LogicalAssetTicker {
  LOGICAL_ASSET_TICKER_UNSPECIFIED = 0;
  LOGICAL_ASSET_TICKER_ETH = 1;
  LOGICAL_ASSET_TICKER_USD = 2;
  LOGICAL_ASSET_TICKER_EUR = 3;
  LOGICAL_ASSET_TICKER_CAD = 4;
}

// CheckoutSettings is a flattened variant of our app-layer type
// CheckoutSettings. This CheckoutSettings has been flattened into a
// single type (ie. instead of using separate types for proposedPayment,
// etc) to help minimize binary serialization message size.
message CheckoutSettings {
  message PayWhatYouWant {
    // PayWhatYouWantFlags is an enum used to bitpack a set of boolean
    // flags used in PayWhatYouWant into the smaller enum type. The set
    // of flags are: 1) isDynamicPricingEnabled is true iff 3cities
    // should try to suggest different amounts to pay based on the net
    // worth of the sender's connected wallet (eg. rich wallets get
    // suggested to pay more), 2) canDonateAnyAsset is true iff the
    // sender may donate any token in any amount, bypassing the usual
    // need to pay in the receiver's specified logical asset. Using this
    // enum to bitpack makes these flags consume a total of 2 bytes if
    // any flags are set or 0 bytes if none are set. Using regular bools
    // consumes 2 bytes per bool. Up to 6 flags can be included in this
    // enum without widening it from 2 bytes to 3 bytes because any
    // value from 0 to 127 (2^7) takes only 2 bytes, but we reserve 0
    // for unspecified, and so we can only fit 6 flags because we need
    // 128 values to fit a full 7 but we have only 127 values since 0 is
    // reserved.
    enum PayWhatYouWantFlags {
      PAY_WHAT_YOU_WANT_FLAGS_UNSPECIFIED = 0;
      // NB we omit the case where all flags are false because by
      // convention, we indicate this case by by omitting this enum
      // value during serialization, and during deserialization,
      // assuming that the zero value of UNSPECIFIED implies no flags
      // are set. This saves 2 bytes in the binary serialization when no
      // flags are set.
      PAY_WHAT_YOU_WANT_FLAGS_IS_DYNAMIC_PRICING_ENABLED_FALSE_CAN_DONATE_ANY_ASSET_TRUE = 1;
      PAY_WHAT_YOU_WANT_FLAGS_IS_DYNAMIC_PRICING_ENABLED_TRUE_CAN_DONATE_ANY_ASSET_FALSE = 2;
      PAY_WHAT_YOU_WANT_FLAGS_IS_DYNAMIC_PRICING_ENABLED_TRUE_CAN_DONATE_ANY_ASSET_TRUE = 3;
    }

    PayWhatYouWantFlags flags = 1; // required iff any flag is true, otherwise must be omitted iff all flags are false. See note on PayWhatYouWantFlags. Deserialized into multiple booleans inside CheckoutSettings.proposedPayment.paymentMode.payWhatYouWant
    repeated bytes suggested_logical_asset_amounts = 2; // optional. Big-endian binary encoding of suggested payment logical asset amounts. Since this is "pay what you want" mode, these amounts are only suggested to the sender and not required. Deserialized as CheckoutSettings.proposedPayment.paymentMode.payWhatYouWant.suggestedLogicalAssetAmountsAsBigNumberHexStrings
  }

  // SenderNoteSettingsMode determines whether the sender/buyer may not
  // provide a note (ie. when this enum is omitted), may provide a note
  // (optional mode), or must provide a note (required mode).
  enum SenderNoteSettingsMode {
    SENDER_NOTE_SETTINGS_MODE_UNSPECIFIED = 0;
    // NB we omit the case where mode is "none" because by
    // convention, we indicate this case by by omitting this enum
    // value during serialization, and during deserialization,
    // assuming that the zero value of UNSPECIFIED implies mode is
    // "none". This saves 2 bytes in the binary serialization when
    // mode is "none" which is expected to be the modal case.
    SENDER_NOTE_SETTINGS_MODE_OPTIONAL = 1;
    SENDER_NOTE_SETTINGS_MODE_REQUIRED = 2;
  }

  oneof proposed_payment_receiver { // required.
    bytes proposed_payment_receiver_address = 1; // Big-endian binary encoding of Ethereum address of the payment receiver. Deserialized as CheckoutSettings.proposedPayment.receiver.address
    string proposed_payment_receiver_ens_name = 2; // ENS name of the payment receiver. Deserialized as CheckoutSettings.proposedPayment.receiver.ensName
  }

  LogicalAssetTicker proposed_payment_logical_asset_ticker = 3; // required. Ticker for logical asset in which payment is denominated. Deserialized as CheckoutSettings.proposedPayment.logicalAssetTicker
  oneof proposed_payment_payment_mode { // required.
    bytes proposed_payment_payment_mode_logical_asset_amount = 4; // Big-endian binary encoding of payment logical asset amount. Deserialized as CheckoutSettings.proposedPayment.paymentMode.logicalAssetAmountAsBigNumberHexString
    PayWhatYouWant proposed_payment_payment_mode_pay_what_you_want = 5; // If oneof is this option, then this checkout is using "pay what you want" mode, which allows the sender to pay what they want within the constraints of these PayWhatYouWant details. Deserialized as CheckoutSettings.proposedPayment.paymentMode.payWhatYouWant
  }

  oneof receiver_strategy_preferences_accepted_token_tickers { // optional. See comparative analysis below for why this design was chosen
    string receiver_strategy_preferences_accepted_token_tickers_allowlist = 6; // space-delimited list of token tickers in which this checkout's payment must be received. Deserialized as CheckoutSettings.receiverStrategyPreferences.acceptedTokenTickers.allowlist
    string receiver_strategy_preferences_accepted_token_tickers_denylist = 7; // space-delimited list of token tickers in which this checkout's payment must not be received. Deserialized as CheckoutSettings.receiverStrategyPreferences.acceptedTokenTickers.denylist
  }
  oneof receiver_strategy_preferences_accepted_chain_ids { // optional. See comparative analysis below for why this design was chosen
    bytes receiver_strategy_preferences_accepted_chain_ids_allowlist = 8; // byte-packed array of big-endian uint32 chain ids on which this checkout's payment must be received. Deserialized as CheckoutSettings.receiverStrategyPreferences.acceptedChainIds.allowlist
    bytes receiver_strategy_preferences_accepted_chain_ids_denylist = 9; // byte-packed array of big-endian uint32 chain ids on which this checkout's payment must not be received. Deserialized as CheckoutSettings.receiverStrategyPreferences.acceptedChainIds.denylist
  }

  string note = 10; // optional. Human-readable note describing or contextualizing this checkout, intended to be read by the sender. Deserialized as CheckoutSettings.note

  // In proto3, field numbers 1 to 15 require 1 byte of field overhead,
  // and field numbers 16 to 2047 require 2 bytes of field overhead. So,
  // here, we reserve unused field numbers less than 16 for future
  // fields that we expect to see very heavy usage in use cases where
  // generated links are shown literally, ie. their length appears in
  // eg. a DM instead of being hidden behind eg. a link shortener or <a>
  // tag.

  // string reserved = 11; // RESERVED FOR FUTURE USE
  // string reserved = 12; // RESERVED FOR FUTURE USE
  // string reserved = 13; // RESERVED FOR FUTURE USE
  // string reserved = 14; // RESERVED FOR FUTURE USE
  // string reserved = 15; // RESERVED FOR FUTURE USE

  SenderNoteSettingsMode sender_note_settings_mode = 16; // optional. Specifies whether the sender/buyer may optionally or must provide a note to the receiver/seller. If omitted, then sender may not provide a note. Deserialized as CheckoutSettings.senderNoteSettings.mode
  string sender_note_settings_instructions = 17; // optional if sender_note_settings_mode is non-empty (ie. optional iff mode is 'optional' or 'required'). Must be omitted if sender_note_settings_mode is omitted (ie. must be omitted iff mode is 'none'). Human-readable instructions for sender/buyer as to what sender note may/must be provided. Eg. "Please enter your full name". Deserialized as CheckoutSettings.senderNoteSettings.instructions

  string success_redirect_url = 18; // optional. URL to redirect to after successful checkout. If this URL begins with a tilde "~", the redirect will be opened in a new tab. Deserialized as CheckoutSettings.successRedirect

  string webhook_url = 19; // optional. Webhook URL to call when checkout events occur, eg. on checkout success. Deserialized as CheckoutSettings.webhookUrl
}

// CheckoutSettingsSigned is an envelope for a cryptographically signed
// CheckoutSettings to help prevent phishing attempts. WARNING
// signatures protect only against modifications to the CheckoutSettings
// and not against the 3cities app being phished.
message CheckoutSettingsSigned {
  CheckoutSettings checkout_settings = 1; // required. The CheckoutSettings that has been cryptographically signed
  uint64 signature_and_salt = 2; // required. The cryptographic signature and salt that, together with a password (held separately), are needed to verify the signature and ensure the CheckoutSettings has not been modified (eg. by a phishing attempt)
}

// CheckoutSettingsEncrypted is an envelope for an encrypted
// CheckoutSettings to make the contents of shareable links private and
// help prevent phishing attempts. WARNING encryption protects only
// against public viewing of and modifications to the CheckoutSettings
// and not against the 3cities app being phished.
message CheckoutSettingsEncrypted {
  bytes encrypted_checkout_settings = 1; // required. The CheckoutSettings that has been encrypted
  uint64 salt_and_iv = 2; // required. The cryptographic salt and iv that, together with a password (held separately), are needed to decrypt the CheckoutSettings
}

/*
   # Comparative analysis of serialized messages sizes for two approaches to token ticker allowlists xor denylists:

   ## Approach #1, space-delimited oneof string:

   oneof accepted_token_tickers {
     string accepted_token_tickers_allowlist = 1;
     string accepted_token_tickers_denylist = 2;
   }

   ## Approach #2, drop oneof and use repeated string. Allows illegal state to be representable where both allowlist and denylist are simultaneously non-empty:

   repeated string accepted_token_tickers_allowlist = 1;
   repeated string accepted_token_tickers_denylist = 2;

   ## Analysis

   ### For a oneof with a space-delimited string:

   * Minimum Size: 1 byte for field number and wire type, 0 bytes for empty string = 1 byte
   * For oneof with space-delimited string with three elements ("ETH USD CAD"): 1 byte (for field number and wire type) + 1 byte (string length) + 11 bytes (for the space-delimited string) = 13 bytes
   * For a oneof with space-delimited string with ten elements ("ETH USD CAD BTC LTC DOGE XMR DASH ZEC XRP"): Size with ten elements: 1 byte (for field number and wire type) + 1 byte (string length) + 39 bytes (for the space-delimited string) = 41 bytes
   * For oneof with space-delimited string with fifteen elements ("ETH USD CAD BTC LTC DOGE XMR DASH ZEC XRP wstETH MKR AAVE SNX YFI"): 1 byte (for field number and wire type) + 1 byte (string length) + 62 bytes (for the space-delimited string) = 64 bytes


   ### For a repeated string without oneof:

   * Minimum Size: 0 bytes (field is omitted)
   * For repeated string fields with three elements ("ETH", "USD", "CAD"): 3 bytes (for field numbers and wire types) + 9 bytes (for string content) + 3 bytes (string lengths) = 15 bytes
   * For repeated string fields with ten elements ("ETH", "USD", "CAD", "BTC", "LTC", "DOGE", "XMR", "DASH", "ZEC", "XRP"): Size with ten elements: 10 bytes (for field numbers and wire types) + 30 bytes (for string content) + 10 bytes (string lengths) = 50 bytes
   * For repeated string fields with fifteen elements ("ETH", "USD", "CAD", "BTC", "LTC", "DOGE", "XMR", "DASH", "ZEC", "XRP", "wstETH", "MKR", "AAVE", "SNX", "YFI"): Size with fifteen elements: 15 bytes (for field numbers and wire types) + 47 bytes (for string content) + 15 bytes (string lengths) = 77 bytes

   ## Bottom line

   Using `oneof string` with space-delimited tickers results in smaller serializations vs dropping oneof and using 2x `repeated string` (one of allowlist and one for denylist).

   The oneof space efficiency comes from `repeated string` having 2 bytes of overhead per list item, but our list items are very short, so the space-delimited oneof string approach is more space efficient.

   The oneof approach also makes the illegal state of simultaneous non-empty allowlist and denylist unrepresentable.

   So, oneof space-delimited string is the best option, and that's why we use it.


   # Comparative analysis for serialized messages sizes for three approaches to chain id allowlists xor denylists

   ## Approach #1, oneof byte-packed uint32:

   oneof accepted_chain_ids { // each `chainId: number` is bytepacked as a 4-byte uint32
   bytes accepted_chain_ids_allowlist = 1;
   bytes accepted_chain_ids_denylist = 2;
   }

   ## Approach #2, byte-packed uint32 without oneof (makes illegal state unpresentable where both allowlist and denylist are simultaneously non-empty):

   bytes accepted_chain_ids_allowlist = 1;
   bytes accepted_chain_ids_denylist = 2;

   ## Approach #3, repeated uint32 (makes illegal state unpresentable where both allowlist and denylist are simultaneously non-empty):

   repeated uint32 accepted_chain_ids_allowlist = 1;
   repeated uint32 accepted_chain_ids_denylist = 2;

   ## Analysis

   ### Comparing Approach #1 (oneof) with #2 (bytes, no oneof)

   Approach #1, oneof byte-packed uint32:

   * Minimum Size: 0 bytes (if the oneof is not set)
   * Size with one element: 1 byte (field number and wire type) + 4 bytes (4-byte uint32) = 5 bytes
   * Size with three elements: 1 byte (field number and wire type) + 12 bytes (3 * 4-byte uint32) = 13 bytes

   Approach #2, byte-packed uint32 without oneof:

   * Minimum Size: 0 bytes (if both fields are unset)
   * Size with one element (either field): 1 byte (field number and wire type) + 4 bytes (4-byte uint32) = 5 bytes
   * Size with three elements (either field): 1 byte (field number and wire type) + 12 bytes (3 * 4-byte uint32) = 13 bytes

   If both fields are never set at the same time, both approaches have identical sizes for all scenarios. The key difference is in the semantics: Approach #2 allows for the illegal state where both an allowlist and denylist can be set, while Approach #1 prevents this.

   So, Approach #1 oneof is superior to #2 because they use the same size, but oneof makes the illegal state unrepresentable where both lists are simultaneously non-empty.

   ### Comparing Approach #1 (oneof) with #3 (repeated uint32)

   With the assumption that 95% of chain IDs are less than 10^6, we can expect that most of these IDs will fit into 3 bytes when using varint encoding, which is used under the hood with repeated uint32.

   The varint encoding uses fewer bytes for smaller numbers:

   * Numbers between 0 and 127 fit into 1 byte.
   * Numbers between 128 and 16383 fit into 2 bytes.
   * Numbers between 16384 and 2097151 fit into 3 bytes.

   So, for the repeated uint32 approach:

   * Most chain IDs will use 3 bytes for the varint encoding.
   * Each element will also have a 1-byte tag, making it 4 bytes in total per chain ID.
   * In contrast, the bit-packing approach (bytes accepted_chain_ids_allowlist) uses exactly 4 bytes per uint32.

   Given this, both approaches have the same byte consumption per element for 95% of the cases, which is 4 bytes.

   Eliminating the oneof doesn't change the minimum size, as both oneof and repeated fields have a minimum size of 0 bytes when empty. Therefore, with the assumption that 95% of chain IDs are less than 10^6, the repeated uint32 approach becomes equally efficient as the bit-packing approach for the majority of cases.

   ### But what if 100% of chain IDs used the entire 4-bytes varint encoding (instead of 95% being less than 10^6)?

   Repeated uint32 with full 4-byte varints:

   * Minimum Size: 0 bytes (if the field is unset)
   * Size with one element: 1 byte (field number and wire type) + 4 bytes (4-byte varint) = 5 bytes
   * Size with three elements: 3 bytes (field numbers and wire types) + 12 bytes (3 * 4-byte varints) = 15 bytes

   In this case, with full 4-byte varints, each element in the list would be the same size as in the packed bytes case. The only overhead would be the 1-byte field number and wire type for each element, making it less efficient than byte-packing for lists with multiple elements.

   ## Bottom line

   Given the assumption that 95% of chain IDs are less than 10^6, approach #1 uses the same amount of space as approach #3 but makes the illegal state unrepresentable.

   If instead, 95% of chain IDs used the full 4-byte varint encoding (ie. if chain IDs were mostly large 32-bit numbers), then approach #1 uses less space than approach #3.

   So, approach #1 is the best option.
*/
