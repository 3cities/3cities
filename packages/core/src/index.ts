import { type Caip222StyleMessageToSign, type Caip222StyleSignature, caip222StyleSignatureMessageDomain, caip222StyleSignatureMessagePrimaryType, caip222StyleSignatureMessageTypes, chainIdOnWhichToSignMessagesAndVerifySignatures, erc1271MagicValue, erc1271SmartAccountAbi } from "./caip222StyleSignature";
import { type Chain, allSupportedChainIds, arbitrum, arbitrumNova, arbitrumSepolia, base, baseSepolia, blast, blastSepolia, chainsSupportedBy3cities, fluentTestnet, getChain, getSupportedChainName, immutableZkEvm, linea, lineaSepolia, mainnet, mode, optimism, optimismSepolia, polygon, polygonAmoy, polygonZkEvm, polygonZkEvmCardona, scroll, scrollSepolia, sepolia, taiko, zkSync, zkSyncSepolia, zora, zoraSepolia } from "./chains";
import { type ExchangeRates, areExchangeRatesEqual, convert, mergeExchangeRates } from "./ExchangeRates";
import { getConfirmationsToWait } from "./getConfirmationsToWait";
import { hasOwnProperty, hasOwnPropertyOfType } from "./hasOwnProperty";
import { type IntRange } from "./IntRange";
import { isProduction } from "./isProduction";
import { type LogicalAsset, type LogicalAssetTicker, addCanonicalFormatToLogicalAssetValue, addSymbolToLogicalAssetValue, addVerboseFormatToLogicalAssetValue, allLogicalAssetTickers, convertFromLogicalAssetDecimalsToTokenDecimals, convertFromTokenDecimalsToLogicalAssetDecimals, defaultSmallAmountsPerLogicalAsset, getDecimalsToRenderForLogicalAssetTicker, getDefaultTruncateTrailingZeroesForLogicalAssetTicker, logicalAssetDecimals, logicalAssets, logicalAssetsByTicker, parseLogicalAssetAmount } from "./logicalAssets";
import { getAllNativeCurrenciesAndTokensForLogicalAssetTicker, getDecimalsToRenderForTokenTicker, getDefaultTruncateTrailingZeroesForTokenTicker, getLogicalAssetTickerForTokenOrNativeCurrencyTicker, isTokenTickerSupportedByLogicalAsset } from "./logicalAssetsToTokens";
import { type NonEmptyArray, ensureNonEmptyArray } from "./NonEmptyArray";
import { alchemyHttpUrl, infuraHttpUrl } from './rpcUrls';
import { type NativeCurrency, type Token, isNativeCurrency, isToken } from './Token';
import { type TokenKey, allTokenTickers, getTokenByTokenKey, getTokenKey, isTokenSupported, nativeCurrencies, tokens } from "./tokens";
import { toUppercase } from "./toUppercase";
import { type DeepWritable, type Writable } from "./Writable";

// TODO consider adding more export subpaths (similar to @3cities/core/proto/checkout-settings), so not all exports are in the @3cities/core namespace, eg. @3cities/core/chains

export { addCanonicalFormatToLogicalAssetValue, addSymbolToLogicalAssetValue, addVerboseFormatToLogicalAssetValue, alchemyHttpUrl, allLogicalAssetTickers, allSupportedChainIds, allTokenTickers, arbitrum, arbitrumNova, arbitrumSepolia, areExchangeRatesEqual, base, baseSepolia, blast, blastSepolia, caip222StyleSignatureMessageDomain, caip222StyleSignatureMessagePrimaryType, caip222StyleSignatureMessageTypes, chainIdOnWhichToSignMessagesAndVerifySignatures, chainsSupportedBy3cities, convert, convertFromLogicalAssetDecimalsToTokenDecimals, convertFromTokenDecimalsToLogicalAssetDecimals, defaultSmallAmountsPerLogicalAsset, ensureNonEmptyArray, erc1271MagicValue, erc1271SmartAccountAbi, fluentTestnet, getAllNativeCurrenciesAndTokensForLogicalAssetTicker, getChain, getConfirmationsToWait, getDecimalsToRenderForLogicalAssetTicker, getDecimalsToRenderForTokenTicker, getDefaultTruncateTrailingZeroesForLogicalAssetTicker, getDefaultTruncateTrailingZeroesForTokenTicker, getLogicalAssetTickerForTokenOrNativeCurrencyTicker, getSupportedChainName, getTokenByTokenKey, getTokenKey, hasOwnProperty, hasOwnPropertyOfType, immutableZkEvm, infuraHttpUrl, isNativeCurrency, isProduction, isToken, isTokenSupported, isTokenTickerSupportedByLogicalAsset, linea, lineaSepolia, logicalAssetDecimals, logicalAssets, logicalAssetsByTicker, mainnet, mergeExchangeRates, mode, nativeCurrencies, optimism, optimismSepolia, parseLogicalAssetAmount, polygon, polygonAmoy, polygonZkEvm, polygonZkEvmCardona, scroll, scrollSepolia, sepolia, taiko, toUppercase, tokens, zkSync, zkSyncSepolia, zora, zoraSepolia, type Caip222StyleMessageToSign, type Caip222StyleSignature, type Chain, type DeepWritable, type ExchangeRates, type IntRange, type LogicalAsset, type LogicalAssetTicker, type NativeCurrency, type NonEmptyArray, type Token, type TokenKey, type Writable };

